
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>product on Trepix</title>
        <link>https://trepix.io/tags/product/</link>
        <description>Recent content in product on Trepix</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 05 Jan 2021 10:00:00 +0100</lastBuildDate>
        
            <atom:link href="https://trepix.io/tags/product/index.xml" rel="self" type="application/rss+xml" />
        
        
        
            <item>
                <title>The Lean Startup</title>
                <link>https://trepix.io/blog/books/the-lean-startup/</link>
                <pubDate>Tue, 05 Jan 2021 10:00:00 +0100</pubDate>
                
                <guid>https://trepix.io/blog/books/the-lean-startup/</guid>
                <content>&lt;p&gt;As always, reality is smashing my face, and I have to adapt to it instead of sticking to my plans. When I was thinking about this post I was trying to organize it like the post before (The Nature of Software Development review): my sensations, what I got from it, and what other people can get. But after reflecting I&amp;rsquo;ve concluded that it was silly.&lt;/p&gt;
&lt;p&gt;Why? Because my knowledge about these topics is so different. While on the software side I feel strong and confident, on product development I feel lost. I don&amp;rsquo;t have references, I have not read more than articles, and I don&amp;rsquo;t even know what I don&amp;rsquo;t know. After reading my first book about this subject, I think it is normal that my list of what I&amp;rsquo;ve learned is quite long. Accordingly, I believe that I&amp;rsquo;m not able to advise others about what they can get out of it.&lt;/p&gt;
&lt;p&gt;In short, this will be a list of what I have learned.&lt;/p&gt;
&lt;h3 id=&#34;the-context&#34;&gt;The context&lt;/h3&gt;
&lt;p&gt;The context almost always determines us, it is indisputable. Some books like &lt;em&gt;&amp;ldquo;The Art of War&amp;rdquo;&lt;/em&gt; or the &lt;em&gt;&amp;ldquo;The Little Prince&amp;rdquo;&lt;/em&gt; bring us different knowledge depending on our age or circumstances when we read it.
I will write down some concepts because they are new for me, not because they are disruptive nor essential. Or maybe I will do it because they resonate with me because of our failures or lessons learnt.&lt;/p&gt;
&lt;p&gt;To understand my takeaways, I will try to summarize some of the keys (in my opinion) of my context:
As I said, the first circumstance is that I&amp;rsquo;m new to the product development area. So, except ideas that derive from or converge with Agile, the rest was unknown.
The second is the feeling that in the Discovery team something was wrong. I couldn&amp;rsquo;t put my finger on what, but I felt that many things prevented us from succeeding. Maybe the first was that I was unsure what success was, but this is another story.
The third is that after a couple of months being familiar with the product area, I started to disagree about how we were validating our progress in some cases.
And the last is that I disagreed with how we listened to our users and how we were getting feedback.
Regardless, if I was right about my sensations, it was how I felt about what was happening.&lt;/p&gt;
&lt;h3 id=&#34;the-big-ideas&#34;&gt;The big ideas&lt;/h3&gt;
&lt;p&gt;Although I have learnt many things, there are a few core ideas that marked me.&lt;/p&gt;
&lt;h4 id=&#34;without-a-clear-hypothesis-it-is-not-possible-to-validate&#34;&gt;Without a clear hypothesis it is not possible to validate&lt;/h4&gt;
&lt;p&gt;The first time that I read this assertion, I was shocked. I thought it is not true, I may not have any hypothesis but see how revenue increases or my user base improves. But then, the question of &lt;em&gt;The Nature Of Software Development&lt;/em&gt; came to my mind. &lt;strong&gt;What is value?&lt;/strong&gt;. And then it hit me. &lt;strong&gt;One of the most important things you can get in an uncertain scenario is clarity and knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Also, I have to say that gaining clarity or knowledge is not an excuse for the flawed execution of a plan. Sometimes people use the sentence: &lt;em&gt;&amp;ldquo;Well at least we learnt something&amp;rdquo;&lt;/em&gt;, I beg to differ. How will we know that we learnt something if we don&amp;rsquo;t know what we are searching for? It is not easy to learn from uncertainty and we can easily fall into fallacies or wrong conclusions.&lt;/p&gt;
&lt;p&gt;Even if we succeed, to improve without understanding the whys, is like playing roulette. If we&amp;rsquo;re not aware of the context, assumptions, and actions regarding them, when we try to replicate the successes, we probably won&amp;rsquo;t be able to because maybe the context has changed or the assumptions now are wrong. It&amp;rsquo;s essential to be explicit about the premises, what we will try to achieve with the action and how we will measure it.&lt;/p&gt;
&lt;p&gt;And no, I&amp;rsquo;m not saying that ideas could not come from beliefs or hunches. I believe there are people with amazing intuition to know what people may need or want. But these assumptions must be validated. And the best way to validate something is by using the scientific method: observing, formulating the hypothesis, testing it and then through the data drawing conclusions. Anything else is just throwing the dice and being a shaman.&lt;/p&gt;
&lt;h4 id=&#34;vanity-metrics-and-success-theatre&#34;&gt;Vanity metrics and success theatre&lt;/h4&gt;
&lt;p&gt;Ok, after accepting the point before, and tacking on that we need metrics, can we measure anything? The answer is nope.
The book talks about how dangerous it is to measure the wrong things. It points out that the metrics used in an established company are not useful for a startup; for example, the total number of users. Suppose we see the total number of users is growing week after week. And this is done through marketing or growth hacking strategies. But, what happens if our product is not cool enough or useful to make them come back and the retention is extremely low? Someday we will run out of users to engage.&lt;/p&gt;
&lt;p&gt;This situation is hazardous because it leads to a &lt;a href=&#34;https://medium.com/sequoia-capital/sustainable-product-growth-541fa786df01&#34;&gt;leaky bucket&lt;/a&gt; scenario. To be in this situation is not good, but it&amp;rsquo;s worse not to know it. Starting from the premise that we are working on innovation and don&amp;rsquo;t know many things, only being aware of it is a good step. We can work on our retention or pivot. The sooner we know it, the sooner we will do something.&lt;/p&gt;
&lt;p&gt;But this is not easy at all. When people see the user base growing, and everything seems to be going well, who&amp;rsquo;s the jinx that raises their hand and suggests that maybe this metric is not as good as they believe? Are we sure that we want to insinuate that they are mistaken while celebrating success? And even harder, are we going to challenge the metrics that are being taught to the investors? Those metrics that maybe give them one more investment round? This situation is what Eric labels as __ success theatre__, when all the efforts go towards pretending that everything is going well instead of trying to create something sustainable and real.&lt;/p&gt;
&lt;p&gt;Eric dedicates a full chapter to this topic. I highly recommend reading it. When writing this, I don&amp;rsquo;t precisely remember many concepts like cohort analysis or innovation accounting. As I don&amp;rsquo;t currently need them, I will go back to them when required.&lt;/p&gt;
&lt;h4 id=&#34;value-hypothesis-and-growth-hypothesis&#34;&gt;Value hypothesis and growth hypothesis&lt;/h4&gt;
&lt;p&gt;It can be something evident for people who are used to working in the product area, but for me, a newbie, it was meaningful learning: validating that an idea is liked by potential customers, is not the same as validating that it can become a business.&lt;/p&gt;
&lt;p&gt;We should answer this question in the value hypothesis: &lt;strong&gt;is this product valuable to potential customers?&lt;/strong&gt;. To answer, we will rely on experiments and metrics to measure things like NPS, retention, or pay for the product. Although they are not perfect, they give us some (cheap) feedback to start. At this point, we can succeed or fail. If we fail, we can keep asking and trying to understand why. Does it really cover a user need? Or is it usable enough for our target user? If we succeed, the second part comes next.&lt;/p&gt;
&lt;p&gt;Ok, we found something that lures people. How will the users find our product? This is the question to answer in the growth hypothesis. Do we know how we will grow? Let&amp;rsquo;s test it. And if we are right, fantastic, we are on a path  that will probably take us to success. If not, we go back again to our assumptions. Is this the correct way to reach potential users? Or even crazier, are we wrong about our target user? Let&amp;rsquo;s think about it, decide and test it again.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I link here the notes I got from the book. They are in Catalan; if you are interested, I can translate them.&lt;/p&gt;
&lt;p&gt;x
If you&amp;rsquo;ve read the book and have a different opinion or have learnt something else, don&amp;rsquo;t hesitate to share your thoughts. I will be happy to hear about it ðŸ˜„.&lt;/p&gt;
</content>
                <description>As always, reality is smashing my face, and I have to adapt to it instead of sticking to my plans. When I was thinking about this post I was trying to organize it like the post before (The Nature of Software Development review): my sensations, what I got from it, and what other people can get. But after reflecting I&amp;rsquo;ve concluded that it was silly.
Why? Because my knowledge about these topics is so different.</description>
            </item>
        
        
            <item>
                <title>The Nature of Software Development</title>
                <link>https://trepix.io/blog/books/the-nature-of-software-develompent/</link>
                <pubDate>Thu, 15 Oct 2020 10:00:00 +0100</pubDate>
                
                <guid>https://trepix.io/blog/books/the-nature-of-software-develompent/</guid>
                <content>&lt;p&gt;The last technical book that I&amp;rsquo;ve recently read is The Nature of Software Development by Ron Jeffries. Manu Rivero recommended it to me inasmuch as he&amp;rsquo;d read it recently, and as I trust his criteria, I decided to read it.
I want to divide this &amp;ldquo;review&amp;rdquo; into three sections: my reading experience (as a journal, to return to just in case I re-read it), what I got from it (given my current context and knowledge) and what knowledge I think someone else might get.&lt;/p&gt;
&lt;h3 id=&#34;my-sensations&#34;&gt;My sensations&lt;/h3&gt;
&lt;p&gt;I think that it&amp;rsquo;s fair to say the book is well written. It was smooth reading and it was never stodgy. Every concept is well split up and each section delivers a little piece of knowledge that is easily understandable. In Spanish, we have a saying that defines this book so well: &amp;ldquo;&lt;em&gt;cortita y al pie&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also accompanied by some drawings that help the author to explain each idea. They are not perfect but are simple and mostly, effective.&lt;/p&gt;
&lt;p&gt;However, I feel that it didn&amp;rsquo;t bring me new disruptive concepts. The vast majority of ideas that I found remind me of the core ideas of agile software development. Well explained and effectively presented, but not much more. However, I think that it&amp;rsquo;s a book that should be read by any tech lead or CTO, if you keep reading I hope you understand why.&lt;/p&gt;
&lt;h3 id=&#34;what-i-got-from-it&#34;&gt;What I got from it&lt;/h3&gt;
&lt;p&gt;Okay, maybe it hasn&amp;rsquo;t brought me any new ideas but was it a waste of time? Absolutely not. I strongly agree with EugÃ¨ne Ionesco&amp;rsquo;s quote: &amp;ldquo;&lt;em&gt;It is not the answer that enlightens, but the question&lt;/em&gt;&amp;rdquo; and I think this book wheels out excellent questions at the end of each section. Even if you know all the concepts from the book, if you make the effort, I believe you will find new perspectives on your day-to-day problems. So, the first is a good pool of questions to always return to at some point.&lt;/p&gt;
&lt;p&gt;The second valuable thing that I got is an excellent way to deliver these ideas. I knew them, but this is not the same as having the skill to bring them to a discussion or chain them in a presentation with your lead. Each idea is held by a solid metaphor and at the same time supported by other ideas. Maybe I&amp;rsquo;m not going to use them in the same way but it has given me new approaches or pictures about the nature of software development, which adds more resources to my pool.&lt;/p&gt;
&lt;p&gt;The most concrete valuable thing that I&amp;rsquo;ve taken away is the reflection on &lt;strong&gt;what value actually is&lt;/strong&gt;. At the time of reading the book, I was on a discovery team, where our mission was to innovate and work on disruptive solutions for our users. And often the discussions were around what innovation is (which deserves a full post) and what is the most valuable thing that we can do?. And even though it is a concrete and clear question its answer is not because value depends on the context and many other factors.
&lt;em&gt;What is value in my context?&lt;/em&gt; or, &lt;em&gt;what value am I trying to get?&lt;/em&gt; are two questions that have frequently come to mind lately. Although I rarely find a good answer, I believe that thinking about that keeps me away from being (too) wrong.&lt;/p&gt;
&lt;h3 id=&#34;what-you-could-get-from-it&#34;&gt;What you could get from it&lt;/h3&gt;
&lt;p&gt;Okay, this was my experience but what happens if you are starting to read about agile, how to improve your development approaches or how to deliver value fast? Could this book give something to you? &lt;strong&gt;Absolutely yes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you are used to delivering value on huge blocks, have a QA and bug fixing phase after each development cycle or even worse betting on all or nothing releasing, this book will bring you a new perspective about how things can be done. Jeffries explains very well the importance of building the software incrementally and why it should be done in this way.&lt;/p&gt;
&lt;p&gt;Related to that, the author also talks about the prioritization-estimation duo. He provides solid reasonings about how you should prioritize given the uncertainty, value and effort and why you should spending too much energy on estimation due to the volatility and the changeability of the context.&lt;/p&gt;
&lt;p&gt;If you have ever experienced a downshifting speed when developing a new product or great difficulty iterating the product and you don&amp;rsquo;t understand why this book can offer you new perspectives. It&amp;rsquo;s not a technical book about how to manage technical debt or how to develop code to make it easier to change. It only brings a few ideas about what you should care about when developing software focusing on quality and sustainability. If you have never been exposed to them you can make a valuable discovery.&lt;/p&gt;
&lt;p&gt;And the last thing is a different way to manage teams. If you are used to seeing traditional management (order and command) you will find a totally different approach based on trust, autonomy and delegation.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Hope you&amp;rsquo;ve found something useful, and if you&amp;rsquo;ve read the book and have a different opinion, don&amp;rsquo;t hesitate to share your thoughts. I will be happy to know about it ðŸ˜„.&lt;/p&gt;
&lt;p&gt;PS: Thanks again to Anna and Em to helped me with the English&lt;/p&gt;
</content>
                <description>The last technical book that I&amp;rsquo;ve recently read is The Nature of Software Development by Ron Jeffries. Manu Rivero recommended it to me inasmuch as he&amp;rsquo;d read it recently, and as I trust his criteria, I decided to read it. I want to divide this &amp;ldquo;review&amp;rdquo; into three sections: my reading experience (as a journal, to return to just in case I re-read it), what I got from it (given my current context and knowledge) and what knowledge I think someone else might get.</description>
            </item>
        
        
            <item>
                <title>Statement of intention</title>
                <link>https://trepix.io/blog/statement-of-intention/</link>
                <pubDate>Sat, 10 Oct 2020 19:15:35 +0100</pubDate>
                
                <guid>https://trepix.io/blog/statement-of-intention/</guid>
                <content>&lt;p&gt;After getting over the first little detail of having a website, here we are writing the first post. I wanted to believe that writing wasn&amp;rsquo;t as difficult as it seemed, but here comes reality to smash our faces again.
So I will try to be brief.&lt;/p&gt;
&lt;p&gt;Well, the first and &lt;strong&gt;most important&lt;/strong&gt; disclaimer before going into about the whys of this blog is that everything I&amp;rsquo;m going to write here is just my experience, my learning and opinions. And don&amp;rsquo;t forget that opinions are like farts: everyone farts, everyone likes their own, but other&amp;rsquo;s farts are usually unpleasant.&lt;/p&gt;
&lt;p&gt;The first objective that I want to hit, is to improve my knowledge retention. Over the last years, I&amp;rsquo;ve read a lot of books but nowadays I can only retain a few core ideas and sometimes others just ring a bell and I have to look them up. In contrast, I&amp;rsquo;ve noticed that I&amp;rsquo;ve internalized better coding techniques like refactoring or TDD because I practiced them, again and again. So I&amp;rsquo;m going to try summarizing each book in order to retain the core information. Probably I will read fewer books, but let&amp;rsquo;s see if I have a higher ROI on my time.&lt;/p&gt;
&lt;p&gt;The second is &lt;strong&gt;maybe&lt;/strong&gt; helping another lost traveller like me. This road is long, not always easy and certainly not clear. Probably, I will not share useful learnings for everyone (nor do I aim to) but maybe someone who&amp;rsquo;s some steps behind could find something useful. If you find something helpful here don&amp;rsquo;t forget to share with others what you have learned (the knowledge, not my blog).&lt;/p&gt;
&lt;p&gt;The last reason to write this blog is to improve my English, so I hope will have enough energy to write some posts in English.&lt;/p&gt;
&lt;p&gt;Hope you find something useful every once in a while. And don&amp;rsquo;t hesitate to share your opinion!&lt;/p&gt;
&lt;p&gt;PS: Kudos to Anna and Em for helping me with my English&lt;/p&gt;
</content>
                <description>After getting over the first little detail of having a website, here we are writing the first post. I wanted to believe that writing wasn&amp;rsquo;t as difficult as it seemed, but here comes reality to smash our faces again. So I will try to be brief.
Well, the first and most important disclaimer before going into about the whys of this blog is that everything I&amp;rsquo;m going to write here is just my experience, my learning and opinions.</description>
            </item>
        
  </channel>
</rss>